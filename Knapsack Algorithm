
Given the weights and values of N objects, place them in a bag with a capacity of W to calculate the bag's maximum possible total value. To put it another way, given are two integer arrays, val[0..N-1] and wt[0..N-1], which, respectively, represent values and weights connected to N items.

#include <stdio.h>

// Function to return maximum of two numbers
int max(int a, int b) {
    return (a > b) ? a : b;
}

int knapsack(int val[], int wt[], int N, int W) {
    int dp[N + 1][W + 1];

    // Initialize DP table
    for (int i = 0; i <= N; i++) {
        for (int w = 0; w <= W; w++) {
            if (i == 0 || w == 0)
                dp[i][w] = 0;
            else if (wt[i - 1] <= w)
                dp[i][w] = max(val[i - 1] + dp[i - 1][w - wt[i - 1]], dp[i - 1][w]);
            else
                dp[i][w] = dp[i - 1][w];
        }
    }

    return dp[N][W];
}

int main() {
    int N, W;

    // Input number of items
    scanf("%d", &N);

    int val[N], wt[N];

    // Input values
    for (int i = 0; i < N; i++)
        scanf("%d", &val[i]);
Reason for late submission
Type reason here
Please enter at least 15 characters

